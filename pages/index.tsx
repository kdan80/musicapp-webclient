import type { NextPage, GetServerSideProps } from 'next'
import Head from 'next/head'
import React from 'react'
import axios from 'axios'
import Header from 'components/Header/Header'
import Dashboard from 'components/Dashboard/Dashboard'
import styles from 'styles/Home.module.scss'
import AudioPlayer from 'components/AudioPlayer/AudioPlayer'
import AlbumGrid from 'components/Album/AlbumGrid'
import { motion, AnimatePresence } from 'framer-motion'

const Home: NextPage = () => {

    const [albums, setAlbums] = React.useState([])
    const [nowPlaying, setNowPlaying] = React.useState()
    const [showMiniPlayer, setShowMiniPlayer] = React.useState<boolean>(false)

    React.useEffect(() => {
        if ( nowPlaying ) setShowMiniPlayer(true)
    }, [nowPlaying])

    React.useEffect(() => {
        (async () => {
              
            const response = await axios({
                method: 'get',
                url: 'http://192.168.1.21:4000/album?page=1&limit=100',
                withCredentials: true
            })
            setAlbums(response.data.results)
        })()
    }, [])

    return (
        <div className={styles.home}>
            <Head>
              <title>Create Next App</title>
              <meta name="description" content="Generated by create next app" />
              <link rel="icon" href="/favicon.ico" />
            </Head>

            <Header />
            <Dashboard albums={albums} >
                <AlbumGrid albums={albums} setNowPlaying={setNowPlaying} />
            </Dashboard>
            <AnimatePresence>
                {
                    showMiniPlayer && (
                        <motion.div
                            className={styles.audioWrapper}
                            key='audioPlayer'
                            initial={{ y: '100%' }}
                            animate={{ y: 0, transition: { duration: .35 } }}
                            exit={{ y: '100%', transition: { duration: .2 } }}
                            >
                            <AudioPlayer 
                                album={nowPlaying}
                                setShowMiniPlayer={setShowMiniPlayer} />
                        </motion.div>
                    )
                }
            </AnimatePresence>
        </div>
    )
}



export const getServerSideProps: GetServerSideProps = async (context) => {
    
    const authCookie = context.req.cookies['user']
    const isLoggedIn = authCookie ? true : false

    if (!isLoggedIn) {
        return {
            redirect: {
                destination: '/login',
                permanent: false
            }
        }
    }

    return { props: {}}
}

export default Home
